from keras.preprocessing.image import ImageDataGenerator
import cv2
import seaborn as sn
import pandas as pd
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import keras
from keras.models import load_model,model_from_json

SIZE = 224
BATCH_SIZE = 50
EPOCHS = 20
MODEL_NUM = "MobileNet"
IMAGE_SIZE = (SIZE,SIZE)


data = ImageDataGenerator(rescale=1./255)
data_val = ImageDataGenerator(rescale=1./255)
data_test = ImageDataGenerator(rescale=1./255)
train_data = data.flow_from_directory('../input/dataset3/Not augmented (80-20)/train',target_size=IMAGE_SIZE,batch_size=BATCH_SIZE,class_mode="categorical")
val_data = data_val.flow_from_directory('../input/dataset3/Not augmented (80-20)/val',target_size=IMAGE_SIZE,batch_size=BATCH_SIZE,class_mode="categorical")
images_test = data_test.flow_from_directory('../input/dataset3/Not augmented (80-20)/test',target_size=IMAGE_SIZE,batch_size=BATCH_SIZE,class_mode="categorical",shuffle=False)

mobile = keras.applications.mobilenet.MobileNet()
x = mobile.output
x = keras.layers.Dropout(0.4)(x)
predictions = keras.layers.Dense(7, activation='softmax')(x)
model = keras.models.Model(inputs=mobile.input, outputs=predictions)

history = model.fit(train_data,validation_data=val_data,epochs=EPOCHS,callbacks=[learning_rate_reduction,checkpoint,callback2])

stats = plt.figure(figsize=(12,8))
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
stats.savefig(MODEL_NUM + "accuracy_history.png")
plt.close(stats)

stat = plt.figure(figsize=(12,8))
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()
stat.savefig(MODEL_NUM + "loss_history.png")
plt.close(stats)
