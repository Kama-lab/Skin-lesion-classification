import numpy as np 
import os
import tensorflow as tf
import cv2
import numpy as np
import matplotlib



def unet():
    inputs = tf.keras.layers.Input((512,512,3))
    conv1 = tf.keras.layers.Conv2D(64, 3, activation = 'relu', padding = 'same')(inputs)
    conv1 = tf.keras.layers.Conv2D(64, 3, activation = 'relu', padding = 'same')(conv1)
    pool1 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(conv1)
    conv2 = tf.keras.layers.Conv2D(128, 3, activation = 'relu', padding = 'same')(pool1)
    conv2 = tf.keras.layers.Conv2D(128, 3, activation = 'relu', padding = 'same')(conv2)
    pool2 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(conv2)
    conv3 = tf.keras.layers.Conv2D(256, 3, activation = 'relu', padding = 'same')(pool2)
    conv3 = tf.keras.layers.Conv2D(256, 3, activation = 'relu', padding = 'same')(conv3)
    pool3 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(conv3)
    conv4 = tf.keras.layers.Conv2D(512, 3, activation = 'relu', padding = 'same')(pool3)
    conv4 = tf.keras.layers.Conv2D(512, 3, activation = 'relu', padding = 'same')(conv4)
    drop4 = tf.keras.layers.Dropout(0.5)(conv4)
    pool4 = tf.keras.layers.MaxPooling2D(pool_size=(2, 2))(drop4)

    conv5 = tf.keras.layers.Conv2D(1024, 3, activation = 'relu', padding = 'same')(pool4)
    conv5 = tf.keras.layers.Conv2D(1024, 3, activation = 'relu', padding = 'same')(conv5)
    drop5 = tf.keras.layers.Dropout(0.5)(conv5)

    up6 = tf.keras.layers.Conv2D(512, 2, activation = 'relu', padding = 'same')(tf.keras.layers.UpSampling2D(size = (2,2))(drop5))
    merge6 = tf.keras.layers.concatenate([drop4,up6], axis = 3)
    conv6 = tf.keras.layers.Conv2D(512, 3, activation = 'relu', padding = 'same')(merge6)
    conv6 = tf.keras.layers.Conv2D(512, 3, activation = 'relu', padding = 'same')(conv6)

    up7 = tf.keras.layers.Conv2D(256, 2, activation = 'relu', padding = 'same')(tf.keras.layers.UpSampling2D(size = (2,2))(conv6))
    merge7 = tf.keras.layers.concatenate([conv3,up7], axis = 3)
    conv7 = tf.keras.layers.Conv2D(256, 3, activation = 'relu', padding = 'same')(merge7)
    conv7 = tf.keras.layers.Conv2D(256, 3, activation = 'relu', padding = 'same')(conv7)

    up8 = tf.keras.layers.Conv2D(128, 2, activation = 'relu', padding = 'same')(tf.keras.layers.UpSampling2D(size = (2,2))(conv7))
    merge8 = tf.keras.layers.concatenate([conv2,up8], axis = 3)
    conv8 = tf.keras.layers.Conv2D(128, 3, activation = 'relu', padding = 'same')(merge8)
    conv8 = tf.keras.layers.Conv2D(128, 3, activation = 'relu', padding = 'same')(conv8)

    up9 = tf.keras.layers.Conv2D(64, 2, activation = 'relu', padding = 'same')(tf.keras.layers.UpSampling2D(size = (2,2))(conv8))
    merge9 = tf.keras.layers.concatenate([conv1,up9], axis = 3)
    conv9 = tf.keras.layers.Conv2D(64, 3, activation = 'relu', padding = 'same')(merge9)
    conv9 = tf.keras.layers.Conv2D(64, 3, activation = 'relu', padding = 'same')(conv9)
    conv9 = tf.keras.layers.Conv2D(2, 3, activation = 'relu', padding = 'same')(conv9)
    conv10 = tf.keras.layers.Conv2D(1, 1, activation = 'sigmoid')(conv9)

    model = tf.keras.models.Model(inputs = inputs, outputs = conv10)

    model.compile(optimizer = tf.keras.optimizers.Adam(lr=0.001), loss = 'binary_crossentropy', metrics = ['accuracy'])

        #model.summary()

    return model

model = unet()


data = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
data_mask = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

data_val = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
data_val_mask = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

train_data = data.flow_from_directory('../input/segment512/512/train/images',target_size=(512,512),batch_size=2,class_mode=None,shuffle=False,seed=1)
train_data_mask = data_mask.flow_from_directory('../input/segment512/512/train/masks',target_size=(512,512),batch_size=2,class_mode=None,shuffle=False,seed=1)

val_data = data_val.flow_from_directory('../input/segment512/512/val/images',target_size=(512,512),batch_size=2,class_mode=None,shuffle=False,seed=2)
val_data_mask = data_val_mask.flow_from_directory('../input/segment512/512/val/masks',target_size=(512,512),batch_size=2,class_mode=None,shuffle=False,seed=2)


train_generator = zip(train_data,train_data_mask)
val_generator = zip(val_data,val_data_mask)

checkpoint = tf.keras.callbacks.ModelCheckpoint("512_model:epoch:{epoch:02d},loss:{val_loss:.2f},acc:{val_accuracy:.2f}.hdf5",
                                                                   monitor='val_accuracy', verbose=1,
                                                                   save_weights_only=True, mode='auto',save_best_only=True, period=2)


learning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='accuracy', 
                                                        patience=2, 
                                                        verbose=1, 
                                                        factor=0.5, 
                                                        min_lr=0.00001)

#model.load_weights("../input/trained-model/model_weights.hdf5")
model.fit_generator(train_generator,validation_data=val_generator,steps_per_epoch=1198,validation_steps=100,epochs=20,callbacks=[learning_rate_reduction,checkpoint])


model.save_weights('512_model_weights.h5')

json_model = model.to_json()
with open("512_json_model.json", "w") as file:
    file.write(json_model)



img = cv2.imread('../input/segmentimage512/_5_3936874.jpg')
img = cv2.resize(img,(512,512))
img = np.reshape(img,[1,512,512,3])
img = img.astype("float32")
img /= 255

probabilities = model.predict(img)

image_array = []

for row in probabilities[0]:
    new_cols = []
    for column in row:
        if column<0.5:
            new_cols.append(0)
        else:
            new_cols.append(255)
    image_array.append(new_cols)
    
image = np.array(image_array)
print(image.shape)


cv2.imwrite('im.png',image)
